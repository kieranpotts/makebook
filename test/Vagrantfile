# -*- mode: ruby -*-
# vi: set ft=ruby :

# ------------------------------------------------------------------------------
# Vagrant configuration file.
#
# The most common configuration options are documented in inline comments below.
# For a complete reference see https://docs.vagrantup.com.
# ------------------------------------------------------------------------------

# Specify the minimum Vagrant version required.
Vagrant.require_version ">= 2.1.0"

# This file is compatible with version 2
# of the Vagrantfile standard.
VAGRANTFILE_API_VERSION = "2"

# Load settings from `vagrant.yaml`.
require 'yaml'
if File.exist?("vagrant.yaml")
  configuration = YAML.load_file("vagrant.yaml")
else
  raise Vagrant::Errors::VagrantError.new, "vagrant.yaml not found"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Our purpose-built development server
  # prepackaged as a Vagrant box.
  config.vm.box = configuration["box"]

  # Constrain box updates to the current major version number. An upgrade of any
  # major component of our server stack — for example, upgrading to a newer LTS
  # release of Ubuntu or Node — is marked by a major version bump. Such major
  # upgrades to the system software stack must be explicitly enabled on an
  # application-by-application basis, and only when continued compatibility is
  # ensured. That is why we don't want boxes automatically updating between
  # major version releases. (This is relevant only for production boxes
  # installed from Vagrant Cloud. This option can be disabled for local testing
  # of new box builds.)
  # config.vm.box_version = ">= 1.0, < 2.0"

  # Enable automatic box update checking. If you disable this, then boxes will
  # only be checked for updates when the user runs `vagrant box outdated`. With
  # this option enabled, available updates will be checked on every `vagrant up`.
  config.vm.box_check_update = true

  # VirtualBox-specific settings.
  config.vm.provider "virtualbox" do |vb|

    # GUI versus headless.
    vb.gui = configuration["guest"]["gui"]

    # A unique name to identify the guest machine.
    vb.name = configuration["guest"]["name"]

    # Allocate CPU cores and memory.
    vb.customize ["modifyvm", :id, "--cpus", configuration["guest"]["cpus"]]
    vb.customize ["modifyvm", :id, "--memory", configuration["guest"]["memory"]]

    # Stop Vagrant from hanging when using private keys for SSH auth.
    # https://github.com/hashicorp/vagrant/issues/8157#issuecomment-304492943
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]

    # By default, Virtualbox doesn't allow symlinks on shared folders (for
    # security reasons). But installers for Node commonly create bin
    # symlinks. Windows users must also boot the VM from a terminal
    # "running as Administrator" for this to work.
    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate//v-root", "1"]

    # Set the timesync threshold to 10 seconds, instead of the default 20
    # minutes. This ensures that the VM's clock is kept closely synced with
    # the host machine's time (it can get out of sync if the laptop goes to
    # sleep, for instance).
    vb.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 10000]

  end

  # There is no need to generate a unique keypair for SSH
  # if the VM will be accessed locally only.
  config.ssh.insert_key = false

  # Allocate a local private network IP address to the VM. You can use the
  # following IP ranges:
  # - 10.0.0.1 ... 10.255.255.254
  # - 172.16.0.1 ... 172.31.255.254
  # - 192.168.0.1 ... 192.168.255.254
  config.vm.network :private_network, :ip => configuration["host"]["ip"]

  # Stop Vagrant from hanging when using private keys for SSH auth.
  # https://github.com/hashicorp/vagrant/issues/8157#issuecomment-301292017
  config.vm.network :forwarded_port, :guest => 22, :host => 2222, :host_ip => "127.0.0.1", :id => 'ssh'

  # Disable the default `/vagrant` directory share...
  config.vm.synced_folder ".", "/vagrant", :disabled => true

  # ... instead, map this project's root directory on the host machine to
  # `/home/vagrant/synced` inside the guest VM.
  config.vm.synced_folder ".", configuration["guest"]["synced_folder"],
    :create => true,
    :group => "vagrant", :owner => "vagrant",
    :mount_options => ["dmode=777", "fmode=666"]

  # Fix tty warnings while provisioning Ubuntu.
  # http://foo-o-rama.com/vagrant--stdin-is-not-a-tty--fix.html
  config.vm.provision "fix-no-tty", type: "shell" do |script|
    script.privileged = false
    script.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
  end

end
